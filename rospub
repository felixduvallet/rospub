#!/usr/bin/env python

"""

Interactive terminal for publishing messages on a given ROS topic.

Usage:
    rospub <topic> <message_type>
    e.g.
    rospub /language std_msgs.msg.String

Interactively waits for input on the terminal, creates a ROS message of
the desired type, and publishes it to the given topic. CTRL+D quits.

Author: Felix Duvallet <felix.duvallet@epfl.ch>

"""

import argparse
import sys
import rospy
import genpy
import yaml

import std_msgs
import geometry_msgs.msg
# TODO: dynamic importing based on message type.


def run(topic, message_type_str):
    # Get the actual message type.

    rospy.loginfo('Creating publisher for type: {}'.format(message_type_str))

    try:
        message_type = eval(message_type_str)
        pub = rospy.Publisher(topic, message_type, queue_size=1)
    except (NameError, AttributeError) as e:
        rospy.logerr('Could not create publisher for type {}:'.format(message_type_str))
        rospy.logerr('  {}'.format(e))
        return

    rospy.loginfo('Publishing message type {} on topic {}.'.
                  format(message_type_str, topic))
    rospy.loginfo('Use Ctrl+D to quit, NOTE that Ctrl+C breaks everything.')

    done = False
    while not done:
        try:
            term_input = raw_input('>>> ')
        except KeyboardInterrupt:
            print('Keyboard interrupt')
            continue
        except EOFError:  # CTRL+D = quit
            done = True
            break

        # Prevent empty messages from going out.
        if not term_input:
            continue

        msg = make_message(message_type_str, term_input)

        if msg:
            pub.publish(msg)
            rospy.loginfo('Published message: {}'.format(msg))

    rospy.loginfo('Finished')


def make_message(message_type_str, content):
    """Creates a ROS message with the appropriate content.

    Both the content and message_type are strings (the message content is returned
    from raw_input).

    Converts the message type string into an actual message class, and then
    creates a ROS message with the content. Some voodoo happens to make sure the
    message data is correct (Int32 have ints, String have astrings, etc...).

    :param message_type_str String representation of the message type.

    :param content The content of the message as a string.

    """
    # Get the actual message type (from string) and instantiate one.
    message_t = eval(message_type_str)
    msg = message_t()

    # Parse the content (assumed to be a string with commas) into a list of
    # yaml types, *unless* the desired message type is a string, in which case
    # do not try to split up or parse as yaml data.
    if message_type_str == 'std_msgs.msg.String':
        content_parsed = [content]
    else:
        content_parsed = [yaml.load(x) for x in content.split(',')]

    try:
        genpy.message.fill_message_args(msg, content_parsed)
    except genpy.message.MessageException as e:
        rospy.logwarn('Could not create message: {}'.format(e))
        msg = None

    return msg


def options(args):
    parser = argparse.ArgumentParser(
        description=('Publish messages directly from the terminal to a topic.\n'
                     'Usage: rospub <topic> <message type>'),
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('topic',  metavar='topic',
                        help='ROS topic.')
    parser.add_argument('message',  metavar='message',
                        help='ROS message type (e.g., std_msgs.msg.String).')
    parser.print_help()

    arguments = parser.parse_args(args)
    return arguments.topic, arguments.message


if __name__ == '__main__':
    args = sys.argv[1:]  # argv[0] is program name.
    (ros_topic, message_type_str) = options(args)
    rospy.init_node('rospub', anonymous=True)
    run(ros_topic, message_type_str)
